parms <- c(
b = 1/(65),
mu = 1/(65),
beta =100,
delta = 0.13,
gammaf = 0.375,
gammas = 0.003,
gammat = 3.35
)
sol <- ode_results(parms)
plot(sol[,5])
parms <- c(
b = 1/(65),
mu = 1/(65),
beta =100,
delta = 0.13,
gammaf = 0.375,
gammas = 0.003,
gammat = 1.35
)
sol <- ode_results(parms)
plot(sol[,5])
parms <- c(
b = 1/(65),
mu = 1/(65),
beta =100,
delta = 0.13,
gammaf = 0.375,
gammas = 0.003,
gammat = 3.05
)
sol <- ode_results(parms)
plot(sol[,5])
parms <- c(
b = 1/(65),
mu = 1/(65),
beta =100,
delta = 0.13,
gammaf = 0.375,
gammas = 0.003,
gammat = 0.05
)
sol <- ode_results(parms)
plot(sol[,5])
parms <- c(
b = 1/(65),
mu = 1/(65),
beta =100,
delta = 0.13,
gammaf = 0.375,
gammas = 0.3,
gammat = 3.35
)
sol <- ode_results(parms)
plot(sol[,5])
parms <- c(
b = 1/(65),
mu = 1/(65),
beta =100,
delta = 0.13,
gammaf = 0.375,
gammas = 0.03,
gammat = 3.35
)
sol <- ode_results(parms)
plot(sol[,5])
parms <- c(
b = 1/(65),
mu = 1/(65),
beta =1,
delta = 0.13,
gammaf = 0.375,
gammas = 0.03,
gammat = 3.35
)
sol <- ode_results(parms)
plot(sol[,5])
parms <- c(
b = 1/(65),
mu = 1/(65),
beta =1,
delta = 0.13,
gammaf = 0.375,
gammas = 0.003,
gammat = 3.35
)
sol <- ode_results(parms)
plot(sol[,5])
parms <- c(
b = 1/(65),
mu = 1/(65),
beta =1,
delta = 0.13,
gammaf = 0.375,
gammas = 0.03,
gammat = 3.35
)
sol <- ode_results(parms)
plot(sol[,5])
parms <- c(
b = 1/(65),
mu = 1/(65),
beta =1,
delta = 0.13,
gammaf = 0.375,
gammas = 0.03,
gammat = 2.35
)
sol <- ode_results(parms)
plot(sol[,5])
parms <- c(
b = 1/(65),
mu = 1/(65),
beta =1,
delta = 0.13,
gammaf = 0.375,
gammas = 0.03,
gammat = 3.3
)
sol <- ode_results(parms)
plot(sol[,5])
parms <- c(
b = 1/(65),
mu = 1/(65),
beta =1,
delta = 0.13,
gammaf = 0.375,
gammas = 0.03,
gammat = 3.35
)
sol <- ode_results(parms)
plot(sol[,5])
parms <- c(
b = 1/(65),
mu = 1/(65),
beta =1,
delta = 0.13,
gammaf = 0.375,
gammas = 0.03,
gammat = 3
)
sol <- ode_results(parms)
plot(sol[,5])
parms <- c(
b = 1/(65),
mu = 1/(65),
beta =1,
delta = 0.13,
gammaf = 0.375,
gammas = 0.3,
gammat = 3
)
parms <- c(
b = 1/(65),
mu = 1/(65),
beta =1,
delta = 0.13,
gammaf = 0.375,
gammas = 0.3,
gammat = 3.35
)
sol <- ode_results(parms)
plot(sol[,5])
parms <- c(
b = 1/(65),
mu = 1/(65),
beta =1,
delta = 0.13,
gammaf = 0.375,
gammas = 0.3,
gammat = 3.05
)
sol <- ode_results(parms)
plot(sol[,5])
parms <- c(
b = 1/(65),
mu = 1/(65),
beta =1,
delta = 0.13,
gammaf = 0.375,
gammas = 0.3,
gammat = 3.35
)
sol <- ode_results(parms)
plot(sol[,5])
parms <- c(
b = 1/(65),
mu = 1/(65),
beta =1,
delta = 0.13,
gammaf = 0.375,
gammas = 0.3,
gammat = 2.35
)
sol <- ode_results(parms)
plot(sol[,5])
parms <- c(
b = 1/(65),
mu = 1/(65),
beta =1,
delta = 0.13,
gammaf = 0.375,
gammas = 0.3,
gammat = 1.35
)
sol <- ode_results(parms)
plot(sol[,5])
parms <- c(
b = 1/(65),
mu = 1/(65),
beta =1,
delta = 0.13,
gammaf = 0.375,
gammas = 0.3,
gammat = 3.35
)
sol <- ode_results(parms)
plot(sol[,5])
parms <- c(
b = 1/(65),
mu = 1/(65),
beta =1,
delta = 0.13,
gammaf = 0.375,
gammas = 0.3,
gammat = 2.85
)
sol <- ode_results(parms)
plot(sol[,5])
parms <- c(
b = 1/(65),
mu = 1/(65),
beta =1,
delta = 0.13,
gammaf = 0.375,
gammas = 3,
gammat = 2.85
)
sol <- ode_results(parms)
plot(sol[,5])
parms <- c(
b = 1/(65),
mu = 1/(65),
beta =1,
delta = 0.13,
gammaf = 0.375,
gammas = 3,
gammat = 3.35
)
sol <- ode_results(parms)
plot(sol[,5])
parms <- c(
b = 1/(65),
mu = 1/(65),
beta =1,
delta = 0.13,
gammaf = 0.375,
gammas = 3,
gammat = 2.35
)
sol <- ode_results(parms)
plot(sol[,5])
parms <- c(
b = 1/(65),
mu = 1/(65),
beta =1,
delta = 0.13,
gammaf = 0.375,
gammas = 3,
gammat = 3.35
)
sol <- ode_results(parms)
plot(sol[,5])
parms <- c(
b = 1/(65),
mu = 1/(65),
beta =1,
delta = 0.13,
gammaf = 0.375,
gammas = 3,
gammat = 1.35
)
sol <- ode_results(parms)
plot(sol[,5])
sol[,5]
parms <- c(
b = 1/(65),
mu = 1/(65),
beta =1,
delta = 0.13,
gammaf = 0.375,
gammas = 3,
gammat = 3.35
)
sol <- ode_results(parms)
sol[,5]
f <- function(x) ode_results(parms,x)[,5]
f(1)
f <- function(x) ode_results(parms,x)[nrow(ode_results(parms,x)),5]
f(1)
integrate(f,0,3)
class(f(1))
f(3)
f(30)
f(300)
?integrate
integrate(f,0,2)
integrate(f,0,1)
integrate(f,10,12)
my_approxfun <- approxfun(1:100, sol[,5])
sol[,5]
my_approxfun <- approxfun(1:101, sol[,5])
f <- approxfun(1:101, sol[,5])
integrate(f,10,12)
g <- function(x) integrate(f,0,x)
g(2)
integrate(f,0,2)
f
f(1)
f(2)
plot(f)
plot(1:100,f(1:100))
integrate(f,0,4)
integrate(f,0.1,4)
integrate(f,1,4)
g <- function(x) integrate(f,1,x)
g(2)
g(4)
plot(1:100,g(1:100))
plot(g)
plot(c(1,10,20,30),c(g(1),g(10),g(20),g(30)))
plot(1,g(1))
plot(x=1,y=g(1))
g(1)
g(3)
class(g(3))
g <- function(x) as.numeric(integrate(f,1,x))
g(3)
g <- function(x) unlist(integrate(f,1,x))
g(2)
g <- function(x) (integrate(f,1,x))$value
g(3)
plot(c(1,10,20,30),c(g(1),g(10),g(20),g(30)))
plot(1:100,g(1:100))
plot(c(1,10,20,30),c(g(1),g(10),g(20),g(30)), type="l")
parms <- c(
b = 1/(65),
mu = 1/(65),
beta =1,
delta = 0.13,
gammaf = 0.375,
gammas = 0.003,
gammat = 3.35
)
sol <- ode_results(parms)
plot(sol[,5])
f <- approxfun(1:101, sol[,5])
g <- function(x) (integrate(f,1,x))$value
plot(c(1,10,20,30),c(g(1),g(10),g(20),g(30)))
plot(f)
plot(1:100,f(1:100))
plot(c(1,10,20,30),c(g(1),g(10),g(20),g(30)))
plot(c(1,10,20,30,50,70,90),c(g(1),g(10),g(20),g(30),g(50),g(70),g(90)))
plot(c(1,10,20,30,50,70,90),c(g(1),g(10),g(20),g(30),g(50),g(70),g(90)), type="l")
plot(c(1,10,20,30,50,70,90,200),c(g(1),g(10),g(20),g(30),g(50),g(70),g(90),g(200)), type="l")
library(hmer)
?diagnostic_pass
library(hmer)
?diagnostic_pass
classification_diag(SIREmulators$ems, SIREmulators$targets, SIRSample$validation)
classification_diag(SIREmulators$ems[[1]], SIREmulators$targets, SIRSample$validation)
classification_diag(SIREmulators$ems[[2]], SIREmulators$targets, SIRSample$validation)
classification_diag(SIREmulators$ems[[3]], SIREmulators$targets, SIRSample$validation)
comparison_diag(SIREmulators$ems[[3]], SIREmulators$targets, SIRSample$validation)
comparison_diag(SIREmulators$ems[[2]], SIREmulators$targets, SIRSample$validation)
comparison_diag(SIREmulators$ems[[1]], SIREmulators$targets, SIRSample$validation)
comparison_diag(SIREmulators$ems[[1]], SIRSample$validation)
comparison_diag(SIREmulators$ems[[1]], validation = SIRSample$validation)
comparison_diag(SIREmulators$ems[[1]], validation = SIRSample$validation, targets = NULL)
tp <- comparison_diag(SIREmulators$ems[[1]], validation = SIRSample$validation, targets = NULL)
row.names(tp)
knitr::opts_chunk$set(echo = TRUE, cache =T)
chosen_params <- list(b = 1/(76*365), mu = 1/(76*365), beta1 = 0.214, beta2 = 0.107, beta3 = 0.428, epsilon = 1/7, alpha = 1/50, gamma = 1/14, omega = 1/365)
library(hmer)
library(deSolve)
library(ggplot2)
library(reshape2)
library(purrr)
library(tidyverse)
library(lhs)
set.seed(123)
ode_results <- function(parms, end_time = 365*2) {
forcer = matrix(c(0, parms['beta1'], 100, parms['beta2'], 180, parms['beta2'], 270, parms['beta3']),
ncol = 2, byrow = TRUE)
force_func = approxfun(x = forcer[,1], y = forcer[,2], method = "linear", rule = 2)
des = function(time, state, parms) {
with(as.list(c(state, parms)), {
dS <- b*(S+E+I+R)-force_func(time)*I*S/(S+E+I+R) + omega*R - mu*S
dE <- force_func(time)*I*S/(S+E+I+R) - epsilon*E - mu*E
dI <- epsilon*E - alpha*I - gamma*I - mu*I
dR <- gamma*I - omega*R - mu*R
return(list(c(dS, dE, dI, dR)))
})
}
yini = c(S = 900, E = 100, I = 0, R = 0)
times = seq(0, end_time, by = 1)
out = deSolve::ode(yini, times, des, parms)
return(out)
}
get_results <- function(params, times, outputs) {
t_max <- max(times)
all_res <- ode_results(params, t_max)
actual_res <- all_res[all_res[,'time'] %in% times, c('time', outputs)]
shaped <- reshape2::melt(actual_res[,outputs])
return(setNames(shaped$value, paste0(shaped$Var2, actual_res[,'time'], sep = "")))
}
ode_results
example_params <- c(
b = 1/(60*365),
mu = 1/(76*365),
beta1 = 0.2, beta2 = 0.1, beta3 = 0.3,
epsilon = 0.13,
alpha = 0.01,
gamma = 0.08,
omega = 0.003
)
solution <- ode_results(example_params)
par(mar = c(2, 2, 2, 2))
plot(solution)
ranges = list(
b = c(1e-5, 1e-4), # birth rate
mu = c(1e-5, 1e-4), # rate of death from other causes
beta1 = c(0.2, 0.3), # infection rate at time t=0
beta2 = c(0.1, 0.2), # infection rates at time t=100
beta3 = c(0.3, 0.5), # infection rates at time t=270
epsilon = c(0.07, 0.21), # rate of becoming infectious after infection
alpha = c(0.01, 0.025), # rate of death from the disease
gamma = c(0.05, 0.08), # recovery rate
omega = c(0.002, 0.004) # rate at which immunity is lost following recovery
)
targets <- list(
I25 = list(val = 115.88, sigma = 5.79),
I40 = list(val = 137.84, sigma = 6.89),
I100 = list(val = 26.34, sigma = 1.317),
I200 = list(val = 0.68, sigma = 0.034),
I300 = list(val = 29.55, sigma = 1.48),
I350 = list(val = 68.89, sigma = 3.44),
R25 = list(val = 125.12, sigma = 6.26),
R40 = list(val = 256.80, sigma = 12.84),
R100 = list(val = 538.99, sigma = 26.95),
R200 = list(val = 444.23, sigma = 22.21),
R300 = list(val = 371.08, sigma = 15.85),
R350 = list(val = 549.42, sigma = 27.47)
)
chosen_params <- list(b = 1/(76*365), mu = 1/(76*365), beta1 = 0.214,
beta2 = 0.107, beta3 = 0.428, epsilon = 1/7, alpha = 1/50, gamma = 1/14, omega = 1/365)
initial_LHS_training <- maximinLHS(90, 9)
initial_LHS_validation <- maximinLHS(90, 9)
initial_LHS <- rbind(initial_LHS_training, initial_LHS_validation)
initial_points <- setNames(data.frame(t(apply(initial_LHS, 1,
function(x) x*unlist(lapply(ranges, function(x) x[2]-x[1])) +
unlist(lapply(ranges, function(x) x[1]))))), names(ranges))
initial_results <- setNames(data.frame(t(apply(initial_points, 1, get_results,
c(25, 40, 100, 200, 300, 350), c('I', 'R')))), names(targets))
wave0 <- cbind(initial_points, initial_results)
training <- wave0[1:90,]
validation <- wave0[91:180,]
ems_wave1 <- emulator_from_data(training, names(targets), ranges,
specified_priors = list(hyper_p = rep(0.55, length(targets))))
restricted_ems <- ems_wave1[c(1,2,3,4,7,8,9,10)]
new_points_restricted <- generate_new_design(restricted_ems, 180, targets, verbose=TRUE)
plot_wrap(new_points_restricted, ranges)
validation_diagnostics(ems_wave2, validation = new_validation, targets = targets, plt = T)
new_initial_results <- setNames(data.frame(t(apply(new_points, 1, get_results,
c(25, 40, 100, 200, 300, 350), c('I', 'R')))),
names(targets))
inflations <- c(1.5,1.5,1,1,1,1,1.5,1.5,2,2,1.5,2)
for (i in 1:length(ems_wave1)) {
ems_wave1[[i]] <- ems_wave1[[i]]$mult_sigma(inflations[[i]])
}
vd <- validation_diagnostics(ems_wave1, validation = validation, targets = targets, plt=TRUE)
new_points <- generate_new_design(ems_wave1, 180, targets, verbose = TRUE)
plot_wrap(new_points, ranges)
new_initial_results <- setNames(data.frame(t(apply(new_points, 1, get_results,
c(25, 40, 100, 200, 300, 350), c('I', 'R')))),
names(targets))
wave1 <- cbind(new_points, new_initial_results)
new_t_sample <- sample(1:nrow(wave1), 90)
new_training <- wave1[new_t_sample,]
new_validation <- wave1[-new_t_sample,]
ems_wave2 <- emulator_from_data(new_training, names(targets), ranges,
check.ranges=TRUE,
specified_priors = list(hyper_p = rep(0.55, length(targets))))
ems_wave2 <- emulator_from_data(new_training, names(targets), ranges,
check.ranges=TRUE,
specified_priors = list(hyper_p = rep(0.55, length(targets))))
vd <- validation_diagnostics(ems_wave2, validation = new_validation, targets = targets,
plt=TRUE)
ems_wave2_new <- diagnostic_pass(ems_wave2, targets = targets, validation = new_validation, verbose = TRUE)
which_pts <- row.names(classification_diag(ems_wave2$I300, targets = targets, validation = new_validation))
which_pts
new_validation[which_pts,]
targets
?classification_diag
print(ems_wave2_new$I25$u_sigma)
ems_wave2_new$I25$mult_sigma(2)
ems_wave2_new$R350 <- ems_wave2$R350$mult_sigma(2)
validation_diagnostics(ems_wave2$R350, targets, new_validation)
validation_diagnostics(ems_wave2$R350, targets, new_validation, row = 1)
validation_diagnostics(ems_wave2_new$R350, targets, new_validation, row = 1)
ems_wave2$R350$u_sigma
ems_wave2_new$R350$u_sigma
